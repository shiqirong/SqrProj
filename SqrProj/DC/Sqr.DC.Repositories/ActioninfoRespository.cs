//-----------------------------------------------------------------------
// <copyright file=" ActioninfoRespository.cs" company="xxxx Enterprises">
// * Copyright (C) 2019 xxxx Enterprises All Rights Reserved
// * version : 4.0.30319.42000
// * author  : auto generated by T4
// * FileName: ActioninfoRespository.cs
// * history : Created by T4 03/11/2019 21:19:09 
// </copyright>
//-----------------------------------------------------------------------
using Sqr.Common.Helper;
using Sqr.Common.Paging;
using Sqr.Dapper.Linq.Common;
using Sqr.DC.Dtos.Account;
using Sqr.DC.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Sqr.DC.Repositories
{
    /// <summary>
    /// actioninfo Respository
    /// </summary>   
    public partial class ActioninfoRepository :BaseRepository<ActioninfoRepository, ActionInfo>
    {
        public async Task<PagingOutput<ActionDto>> GetActionPaged(PagingInput<ActionDto> input)
        {
            var output= await  QueryPagedAsync<ActionInfo>(c =>
            c.IsDeleted==0
            && WhereIf<ActionInfo>(!string.IsNullOrWhiteSpace(input.InputData.Action),()=>c.Action == input.InputData.Action)
            && WhereIf<ActionInfo>(!string.IsNullOrWhiteSpace(input.InputData.Controller), () => c.Controller == input.InputData.Controller)
            && WhereIf<ActionInfo>(!string.IsNullOrWhiteSpace(input.InputData.Category), () => c.Category == input.InputData.Category)
            && WhereIf<ActionInfo>(!string.IsNullOrWhiteSpace(input.InputData.Name), () => c.Category.Contains(input.InputData.Name))
            && WhereIf<ActionInfo>(input.InputData.SystemId!=0, () => c.SystemId==input.InputData.SystemId),//c=>new { c.SystemId, c.Controller },
            
            new PagedQueryParams()
            {
                PageIndex = input.Page,
                PageSize = input.Limit
            });

            return new PagingOutput<ActionDto>()
            {
                Total = output.Total,
                PageIndex = input.Page,
                PageSize = input.Limit,
                Rows = output.Data.MapTo<IList<ActionDto>>()
            };

        }

        public async Task<int> Update(ActionInfo input)
        {
            return await UpdateAsync(c => new
            {
                input.Action,
                input.Category,
                input.Controller,
                input.Name,
                input.Parameters,
                input.ParentId,
                UpdateTime=DateTime.Now,
                input.UpdateUser,
                input.SystemId,
                input.SystemName
            }, c => c.Id == input.Id);
        }


    }
}
