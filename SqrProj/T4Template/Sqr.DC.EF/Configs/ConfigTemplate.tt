<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="$(ProjectDir)Manager.ttinclude" #>
<#@ include file="$(ProjectDir)EntityHelper.ttinclude" #>
<# 
    // 是否是WCF服务模型
    bool serviceModel = true;
    
    // 数据库连接
    var connectionString = @"server=127.0.0.1;uid=root;pwd=root;";

    // 需要解析的数据库
    var database = new List<string> { "sqr" };

    // 文件版权信息
    var copyright = DateTime.Now.Year + " xxxx Enterprises All Rights Reserved";
    var version = Environment.Version;
    var author = "auto generated by T4";
	var solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");
    var manager = Manager.Create(Host, GenerationEnvironment,solutionsPath+"\\DC\\Sqr.DC.EF\\Configs");
    var entities = EntityHelper.GetEntities(connectionString, database);

    foreach(Entity entity in entities)
    {
        manager.StartNewFile(entity.EntityName + "Config.cs");
#>
//-----------------------------------------------------------------------
// <copyright file=" <#= entity.EntityName #>.cs" company="xxxx Enterprises">
// * Copyright (C) <#= copyright #>
// * version : <#= version #>
// * author  : <#= author #>
// * FileName: <#= entity.EntityName #>.cs
// * history : Created by T4 <#= DateTime.Now #> 
// </copyright>
//-----------------------------------------------------------------------
using System;
using System.Data.Entity.ModelConfiguration;
using Sqr.DC.EF.Models;


namespace Sqr.DC.EF.Configs
{
    /// <summary>
    /// <#= entity.EntityName #> Entity Model Config
    /// </summary>   
    public class <#= entity.EntityName #>Config :EntityTypeConfiguration<<#=entity.EntityName#>>
    {
		public <#= entity.EntityName #>Config()
        {
            ToTable("<#=entity.EntityName#>");

            HasKey(m => m.Id).Property(m => m.Id).HasColumnType("int");
        
	<#
			for(int i = 0; i < entity.Fields.Count; i++)
			{
				var maxLen="";
				var isRequired="";
				if(entity.Fields[i].Type=="string"){
					maxLen=".HasMaxLength("+entity.Fields[i].MaxLength+")";
				}
				if(entity.Fields[i].IsNullable=="NO"){
					isRequired=".IsRequired()";
				}
	#>        
			/// <summary>
			/// <#= entity.Fields[i].Comment #>
			/// </summary>
			Property(m=>m.<#=entity.Fields[i].Name#>).HasColumnType("<#= entity.Fields[i].DbType #>")<#=maxLen#><#=isRequired#>;
	<#
			}
	#>
		}
	}
}
<#        
        manager.EndBlock(); 
    }

    manager.Process(true);
#>

